[{"id":0,"href":"/Java-HomeWork/docs/OOP-LAB/","title":"Oop Lab","section":"Docs","content":"LAB -\u0026gt; 这个实验是每周都有的 #  不用太纠结于名字的问题，只需要知道这些东西每周都要写就行了\n（历史遗留\u0026hellip;）\n"},{"id":1,"href":"/Java-HomeWork/docs/OOP-LAB/LAB00/","title":"Lab00","section":"Oop Lab","content":"Lab00: 认识 Java #  1. 实验⽬的 #   掌握 Java 环境配置 使用 CMD 编译运行 Java 程序 使用 IDE 编译运行 Java 应用程序 理解 Java 语言中的关键字、标识符并能灵活使用 理解、掌握 Java 语言的简单数据类型并能灵活使用（重点强制类型转换） 理解引用数据类型，理解简单数据类型和引用数据类型的特点 理解、掌握 Java 语言中的运算符并能灵活使用 理解、掌握常量与变量的概念并能灵活使用  2. 编译与运行 #  Question01:\n借助身边的工具，学习 java， javac 等命令的使用，并尝试编译运行一个 Java 程序。\n2. Hello, World! #  Question02:\n学习一个新语言的第一步，自然是输出 Hello, World!。\n但是作为大二的学生，我们略微增加一点点难度 ~ 你需要输出很多 Hello, World!\n本题需要你实现一个 Test 类：\n  程序开始运行，进入main方法，并输出你的学号和姓名\n  当终端输入 QUIT 时，系统退出，并在终端打印一行字符：\n  ----- Good Bye! -----  对于其他的输入，在终端中输出一行 Hello, World!，等待下一行输入  你需要提交运行时的截图。\n程序退出 #  和 C 语言的return 0类似，Java 程序也有其退出码，整个程序的正常的退出码应该为 0，而不应该为-1、1 等。\n 在测评机中，退出状态非 0 则会被认为是程序未正常结束，很容易导致你的作业被错判，因此请务必注意在循环等进行程序退出时，确保退出状态为 0\n 下面给出 Java 中退出的一个例子：\nclass Example { \tpublic static void main(String[] args) { \tint x = 0;  \twhile (true) { \tx++; \tif (x \u0026gt; 100) { \tSystem.out.println(\u0026#34;get 100\u0026#34;); \tSystem.exit(0); \t} \t} \t} }  // 这只是退出程序的一种方法，当然，针对该例子，你也可以直接使用break，跳出while循环，直接到达整个程序的退出区域（默认退出状态为0） 参考实现 #   Java 打印字符串与其他语言有所区别，不是直接调用 print 函数，可以用如下语句：  String str = \u0026#34;Hello world!\u0026#34; System.out.println(str);  Java 连续读取输入行的一种实现：  Scanner in = new Scanner(System.in); String argStr; while (true) {  argStr = in.nextLine(); } 3. IDE 的使用 #  Question03:\n(1). 编写以下程序，并运行。将运行结果截图提交。\n(2). 将断点设置在第八行，查看变量 a 的值，提交此刻的屏幕截图。\npublic class HelloWorld {  public static void main(String[] args) {  System.out.println(\u0026#34;Hello World!\u0026#34;);  int a = 1;  a=a+1;  a=a+2;  System.out.println(\u0026#34;a is \u0026#34; + a);  a=a+3; //断点行  a=a+4;  System.out.println(\u0026#34;a is \u0026#34; + a);  } } 4. 基本数据类型 #  Question04:\n看程序输出结果,并提交结果内容或截图\npublic class App1 {  public static void main(String args[]) {  // 定义整形变量a和双精度浮点变量b、c  int a = 126;  double b = 0.2;  double c = 1.6;  // 创建字符串对象  String str1 = \u0026#34;Hello World\u0026#34;;   String str = new String(\u0026#34;字符串不是基本数据类型\u0026#34;);  // 输出各个变量  System.out.println(\u0026#34;a=\u0026#34; + a);  System.out.println(\u0026#34;b+c=\u0026#34; + (b + c));  System.out.println(\u0026#34;b+c=\u0026#34; + b + c);  System.out.println(str);  System.out.println(str1);  } } Question05:\n看程序输出结果,并提交结果内容或截图\npublic class VarDemo {  public static void main(String[] args) {  byte b = 0x55;  boolean B = true;  short s = 0x55ff;  int i = 1000000;  long l = 0xffffL;  char c = \u0026#39;c\u0026#39;;  float f = 0.23F;  double d = 0.7E-3;  String S = \u0026#34;This is a string\u0026#34;;  System.out.println(\u0026#34;字节型变量 b = \u0026#34; + b);  System.out.println(\u0026#34;短整型变量 s = \u0026#34; + s);  System.out.println(\u0026#34;整型变量 i = \u0026#34; + i);  System.out.println(\u0026#34;长整型变量 l = \u0026#34; + l);  System.out.println(\u0026#34;字符型变量 c = \u0026#34; + c);  System.out.println(\u0026#34;浮点型变量 f = \u0026#34; + f);  System.out.println(\u0026#34;双精度变量 d = \u0026#34; + d);  System.out.println(\u0026#34;布尔型变量 B = \u0026#34; + B);  System.out.println(\u0026#34;字符串对象 S = \u0026#34; + S);  } } Question06:\n编写一段代码验证 Java 中类的基本数据类型字段（成员变量）的默认初始化值，请按照对应类型的字面量填写。\n   基本类型 默认值 基本类型 默认值     byte  boolean    short  char    int  float    long  double     6. 三元运算符 #  Question07:\n看程序输出结果,并提交结果内容或截图\npublic class FindMinMax{  public static void main(String []args)  {  double temp, max, min;  double d1=1,d2=-9.9,d3=96.9;  temp=d1\u0026gt;d2?d1:d2;  temp=temp\u0026gt;d3?temp:d3;  max=temp;  temp=d1\u0026lt;d2?d1:d2;  temp=temp\u0026lt;d3?temp:d3;  min=temp;  System.out.println(\u0026#34;max=\u0026#34;+max);  System.out.println(\u0026#34;min=\u0026#34;+min);  } } 7. 短路 #  Question08:\n阅读下面这段代码：\n// ShortCircuit.java public class ShortCircuit {  static void print(String s) {  System.out.println(s);  }  static boolean test1(int val) {  print(\u0026#34;1\u0026#34;);  return val \u0026lt; 1;  }  static boolean test2(int val) {  print(\u0026#34;2\u0026#34;);  return val \u0026lt; 2;  }  static boolean test3(int val) {  print(\u0026#34;3\u0026#34;);  return val \u0026lt; 3;  }  public static void main(String[] args) {  boolean b = test1(0) \u0026amp;\u0026amp; test2(2) \u0026amp;\u0026amp; test3(2);  print(\u0026#34;b is \u0026#34; + b);  } } 运行 java ShortCircuit，程序的输出是什么？\n请解释 Java 执行串联逻辑运算时的流程，可以用文字、流程图、伪代码描述。\n思考如何利用短路这个机制来优化程序。\n8. 全局变量 #  Question09:\n看程序输出结果,并提交结果内容或截图\npublic class GlobalVar {  int a = 10; // 全局变量,下同  double b = 20;   public static void main(String[] args) {  GlobalVar globalVar = new GlobalVar();  System.out.println(\u0026#34;全局变量 a = \u0026#34; + globalVar.a);  // System.out.println(\u0026#34;全局变量 a = \u0026#34; +a); 错误写法  globalVar.print();  System.out.println(\u0026#34;全局变量变化后 a = \u0026#34; + globalVar.a);  }   public void print() {  System.out.println(\u0026#34;在print()中, 全局变量　a = \u0026#34; + a + \u0026#34;, b = \u0026#34; + b);  a = 30;  System.out.println(\u0026#34;在print()中, 全局变量　a = \u0026#34; + a + \u0026#34;, b = \u0026#34; + b);  } } 9. 局部变量 #  Question10:\n看程序输出结果,并提交结果内容或截图\npublic class LocalVar {  public static void main(String[] args) {  LocalVar localVar = new LocalVar();  // System.out.println(\u0026#34;局部变量 a = \u0026#34; + localVar.a); 引用错误，下同  localVar.print();  // System.out.println(\u0026#34;变化后的局部变量 a = \u0026#34; + localVar.a);  }   public void print() {  int a = 10; // 局部变量，下同  double b = 20;  System.out.println(\u0026#34;在print()中的局部变量　a = \u0026#34; + a + \u0026#34;, b = \u0026#34; + b);  a = 30;  System.out.println(\u0026#34;在print()中的局部变量　a = \u0026#34; + a + \u0026#34;, b = \u0026#34; + b);  } } "},{"id":2,"href":"/Java-HomeWork/docs/OOP-LAB/LAB01/","title":"Lab01","section":"Oop Lab","content":"Lab01: Java 语法 \u0026amp; 面向对象初步 #  1. 实验⽬的 #   掌握 Java 环境配置 使⽤ CMD 编译运⾏ Java 程序 使⽤ IDE 编译运⾏ Java 应⽤程序 理解 Java 语⾔中的关键字、标识符并能灵活使⽤ 理解、掌握 Java 语⾔的简单数据类型并能灵活使⽤（重点强制类型转换） 理解引⽤数据类型，理解简单数据类型和引⽤数据类型的特点 理解、掌握 Java 语⾔中的运算符并能灵活使⽤ 理解、掌握常量与变量的概念并能灵活使⽤ 理解、掌握 Java 语⾔的流程控制（重点 switch case break 语句）并能灵活使⽤ 理解、掌握 Java 语⾔的数组的声明、赋值及使⽤ 理解掌握面向对象思维方式，确定问题域，使用面向对象思维解决实际问题  2. Class 初步 #  Question01: 阅读下列 Java 源文件，并回答问题。\npublic class Person {  void speakHello() {  System.out.print(\u0026#34;您好，很高兴认识您\u0026#34;);  System.out.println(\u0026#34; nice to meet you\u0026#34;);  } }  class Xiti {  public static void main(String args[]) {  Person zhang = new Person();  zhang.speakHello();  } } （a）上述源文件的名字是什么？\n（b）编译上述源文件将生成几个字节码文件？这些字节码文件的名字都是什么？\n（c）在命令行执行 java Person 得到怎样的错误提示？执行 java xiti 得到怎样的错误提示？执行 java Xiti.class 得到怎样的错误提示？执行 java Xiti 得到怎样的输出结果？\nQuestion02: 编写程序输出自己的学号姓名，运行并截图。\n3. Unicode 编码 #  Question03: 看程序输出结果,并提交结果内容或截图\npublic class Unicode {  public static void main(String args[]) {  char c = \u0026#39;大\u0026#39;;  System.out.println(\u0026#34;\\\u0026#39;\u0026#34; + c + \u0026#34;\\\u0026#39;的Unicode编码：\u0026#34; + (int) c);  int num = 23398;  System.out.println(\u0026#34;Unicode编码为\u0026#34; + num + \u0026#34;的字符是：\u0026#34; + (char) num);  } } 4. 数组 #  Question04: 看程序输出结果,并提交结果内容或截图\npublic class UseIntArray {  public static void main(String[] args) {  int intArray[] = { 8, 9, 12,13,14};  int sum = 0;  for (int i = 0; i \u0026lt; intArray.length; i++)  sum += intArray[i];  for (int i = 0; i \u0026lt; intArray.length; i++)  System.out.println(\u0026#34;intArray[\u0026#34; + i + \u0026#34;]=\u0026#34; + intArray[i]);  System.out.println();  System.out.println(\u0026#34;sum=\u0026#34; + sum);  } } Question05: 看程序输出结果,并提交结果内容或截图:\nclass TwoDimensionArray {  public static void main(String args[]) {  int b[][] = { { 11 }, { 21, 22 }, { 31, 32, 33 } };  int sum = 0;  b[0][0] = 1000;  for (int i = 0; i \u0026lt; b.length; i++) {  for (int j = 0; j \u0026lt; b[i].length; j++)  sum += b[i][j];  }  System.out.println(\u0026#34;b[0][0]=\u0026#34; + b[0][0] + \u0026#39;\\n\u0026#39; + \u0026#34;sum=\u0026#34; + sum + \u0026#39;\\n\u0026#39;  + \u0026#34;b.lengh=\u0026#34; + b.length);   int arr1[][] = new int[3][4];  int arr2[][] = new int[3][];  int arr3[][] = { { 0, 1, 2 }, { 3, 4, 5 }, { 6, 7, 8 } };  int i, j, k = 0;   // arr1[][]赋值  for (i = 0; i \u0026lt; 3; i++)  // arr1为3行4列  for (j = 0; j \u0026lt; 4; j++)  arr1[i][j] = k++;   // arr2[][]开辟内存空间  for (i = 0; i \u0026lt; 3; i++)  // arr2每一行是变长的，元素个数为3、4、5  arr2[i] = new int[i + 3];  // arr2[][]赋值  for (i = 0; i \u0026lt; 3; i++)  for (j = 0; j \u0026lt; arr2[i].length; j++)  arr2[i][j] = k++;   // 输出arr1  System.out.println(\u0026#34; arr1:\u0026#34;);  for (i = 0; i \u0026lt; 3; i++)  for (j = 0; j \u0026lt; 4; j++)  System.out.print(\u0026#34; \u0026#34; + arr1[i][j]);  System.out.println();   // 输出arr2  System.out.println(\u0026#34; arr2:\u0026#34;);  for (i = 0; i \u0026lt; 3; i++)  for (j = 0; j \u0026lt; arr2[i].length; j++)  System.out.println(\u0026#34; \u0026#34; + arr2[i][j]);   // 输出arr3  System.out.println(\u0026#34; arr3:\u0026#34;);  for (i = 0; i \u0026lt; 3; i++)  // arr3为3行3列  for (j = 0; j \u0026lt; 3; j++)  System.out.print(\u0026#34; \u0026#34; + arr3[i][j]);  } } 5. switch #  Question06: 阅读下面程序，给出程序的输出结果，为什么？\npublic class E {  public static void main (String args[ ]) {  char c = \u0026#39;\\0\u0026#39;;  for(int i=1;i\u0026lt;=4;i++) {  switch(i) {  case 1: c = \u0026#39;J\u0026#39;;  System.out.print(c);  case 2: c = \u0026#39;e\u0026#39;;  System.out.print(c);  break;  case 3: c = \u0026#39;p\u0026#39;;  System.out.print(c);  default: System.out.print(\u0026#34;好\u0026#34;);  }  }  } } 6. 循环 #  Question07: 请实现程序输出以下 5*5 数字方格。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 需要在 main 函数的输入参数中设置 5，输出 5*5 的数字方格。如果是输入 7，则是 7*7 的数字方格。需要提交代码及运行结果截图。\nQuestion08: 请实现程序输出以下星塔.\n需要在 main 函数的输入参数中设置 5，输出 5 层星塔。如果是输入 7，则输出 7 层星塔。假设输入参数都是奇数，且都大于等于 5，小于等于 11，提交代码及运行结果截图。\n *  *** *****  ***  * Question09: 编写静态方法 double getPi(int n)，利用公式$\\pi = 4\\sum_{i=0}^{n}{\\frac{\\left(-1\\right)^{i}}{2i+1}}$，求 pi 的近似值，需求如下\n/** * 利用公式\\pi = 4\\sum_{i=0}^{n}{\\frac{\\left(-1\\right)^{i}}{2i+1}}求指定精度的圆周率 * 如果n是负数，视其为0 * @param n 公式中的i的上限 * @return 圆周率的近似值 */ public static double getPi(int n); 题外话：\n如果 n 是负数，视其为 0\n有穷求和的区间是闭区间，上限 n 对应的级数项也是要被计算的。\nQuestion10: 快速排序\n编写静态方法int[] qsort(int[] arr)，需求如下：\n /** * 对一个int数组进行快速排序，结果是升序的，并且不会开辟额外的数组空间 * @param arr 待排序的数组 * @return 升序排列好的arr，如果arr==null，则返回null */  public static int[] qsort(int[] arr); 约束：\n返回值必须是原数组，即 return arr。\n可以任意次创建指向原数组的引用，但是请不要在排序过程中创建新的数组。\n可以根据需要定义新的函数。\n如果数组是 null，返回 null。\n对于空数组(arr.length==0)，原样返回，而不是 null。\n这一次请不要使用 java.util.Array.sort()之类的操作。\nQuestion11: 现有一组数据分别是：12,45,67,89,123,-45,67，实现以下两步：\n(1) 请对这组数据排序后，按照从小到大的顺序打印；\n(2) 从键盘输入任意整数，程序判断该整数是否存在该数组中；\nQuestion12: 阅读下面代码并查看输出结果\npublic class ForInString {  public static void main(String[] args) {  for(char c : \u0026#34;An African Swallow\u0026#34;.toCharArray())  System.out.print(c + \u0026#34; \u0026#34;);  } } 7. 引用 #  Question13: 阅读下面这段代码：\nclass Point {  int x,y;  void setXY(int m,int n){  x = m;  y = n;  } } public class Example {  public static void main(String args[]) {  Point p1,p2;  p1=new Point();  p2=new Point();  System.out.println(\u0026#34;p1的引用:\u0026#34;+p1);  System.out.println(\u0026#34;p2的引用:\u0026#34;+p2);  p1.setXY(1111, 2222);  p2.setXY(-100, -200);  System.out.println(\u0026#34;p1的x,y坐标:\u0026#34;+p1.x+\u0026#34;,\u0026#34;+p1.y); // 1  System.out.println(\u0026#34;p2的x,y坐标:\u0026#34;+p2.x+\u0026#34;,\u0026#34;+p2.y); // 2  p1 = p2;  p1.setXY(0, 0);  System.out.println(\u0026#34;p1的引用:\u0026#34;+p1);  System.out.println(\u0026#34;p2的引用:\u0026#34;+p2);  System.out.println(\u0026#34;p1的x,y坐标:\u0026#34;+p1.x+\u0026#34;,\u0026#34;+p1.y); // 3  System.out.println(\u0026#34;p2的x,y坐标:\u0026#34;+p2.x+\u0026#34;,\u0026#34;+p2.y); // 4  } } 请指出代码中注释标注出的四行输出的内容会是什么。\n题外话：\n意在理解 Java 对象实例是作为引用存在的。\n如果你要为一个类实现 copy() 方法，思考如何避免引用间赋值导致的浅拷贝？或者说，如何确保进行的是深拷贝。你需要查一下什么是浅拷贝？什么是深拷贝？\n同样的问题也存在于 String 的 == 和 equals() 方法，对于不同的背景，相等的定义可能也不同。\nQuestion14: 阅读下面程序，给出程序的输出结果，为什么？\npublic class Test{  public static void main(String args[]) {  int a[]={1,2,3,4};  int b[]={100,200,300};  System.out.println(\u0026#34;数组a的元素个数=\u0026#34;+a.length);  System.out.println(\u0026#34;数组b的元素个数=\u0026#34;+b.length);  System.out.println(\u0026#34;数组a的引用=\u0026#34;+a);  System.out.println(\u0026#34;数组b的引用=\u0026#34;+b);  a=b;  System.out.println(\u0026#34;数组a的元素个数=\u0026#34;+a.length);  System.out.println(\u0026#34;数组b的元素个数=\u0026#34;+b.length);  System.out.println(\u0026#34;a[0]=\u0026#34;+a[0]+\u0026#34;,a[1]=\u0026#34;+a[1]+\u0026#34;,a[2]=\u0026#34;+a[2]);  System.out.print(\u0026#34;b[0]=\u0026#34;+b[0]+\u0026#34;,b[1]=\u0026#34;+b[1]+\u0026#34;,b[2]=\u0026#34;+b[2]);  } } 8. 可变参数 #  Question15: 看程序输出结果,并提交结果内容或截图:\npublic class E {  public static void main(String args[]) {  f(1,2);  f(-1,-2,-3,-4); //给参数传值时，实参的个数很灵活  f(9,7,6) ;  }  public static void f(int ... x){ //x是可变参数的代表，代表若干个int型参数  for(int i=0;i\u0026lt;x.length;i++) { //x.length是x代表的参数的个数  System.out.println(x[i]); //x[i]是x代表的第i个参数(类似数组)  }  } } Question16: 编写静态方法String strscat(String... args)，需求如下：\n/** * 将任意个字符串顺序连接，不应该改变任意一个原有参数 * @param args 字符串们 * @return args中的字符串顺序连接组成的新字符串 */ public static String strscat(String... args); 样例：\n   调用方法 返回值     strscat(\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;e\u0026rdquo;) \u0026ldquo;abce\u0026rdquo;   strscat(\u0026ldquo;str\u0026rdquo;) \u0026ldquo;str\u0026rdquo;    回答：\n请尝试理解 Java 可变参数的实现机制。\n调用strscat(new String[]{\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;})能通过编译吗？\n如果还有静态方法String strscat(String[] args)同时存在，代码能编译通过吗？这时传入的参数是什么？又会返回什么？\n如果我们声明的是String strscat(String[] args)，strscat()这样的调用还能通过编译吗？如果能，这时传入参数和返回值的情况和String strscat(String... args)通过相同吗？\n9. 面向对象（复习并完成课堂知识点） #  Question17: 减肥。小王本来体重 70Kg，经过减肥，体重降到 45Kg，试从这个问题领域中识别对象、类、属性、行为、状态，和状态变化。尝试将你抽象出来的类用 Java 代码实现出来，并编写一个测试类，来描述上述过程。\nQuestion18: 制作一桌丰盛的年夜饭。定义采购员类和厨师类的属性和行为，在测试类中产生采购员的对象：姑姑，妈妈和你，在测试类中产生出厨师的对象：爸爸和婶婶，协同制作年夜饭。\n"},{"id":3,"href":"/Java-HomeWork/docs/OOP-LAB/LAB02/","title":"Lab02","section":"Oop Lab","content":"Java 程序设计 Lab02 #  实验目的 #   理解并掌握类的概念 理解并掌握对象的概念 理解类与对象的关系 理解面向对象中抽象过程 理解面向对象中的消息 理解 Java 程序的基本结构并能灵活使用 理解并掌握 Java 类的定义（成员变量、成员方法和方法重载） 理解并掌握 Java 类的构造函数（默认构造函数、带参数构造函数），理解重 载的构造函数并灵活使用 理解 Java 垃圾内存自动回收机制 理解并掌握 Java 类变量和类方法  实验题目 #  Question1: 简答题 #  编译下面这个类：\npublic class Sample {  int x; // 1  long y = x; // 2  public void f(int n) {  int m; // 3  int t = n + m; // 4  }  public static void main(String[] args) {  Sample t=new Sample();  t.f(5);  System.out.println(t.x);  } } 注释标记的哪些行会导致编译错误，为什么?\nQuestion2: 简答题 overload #  阅读下面代码：\npublic class Overload{  Overload(int m){}  Overload(double m){}  int Overload(int m){return 23;}  void Overload(double m){} } 对于Overload类，下面哪些叙述是错误的，为什么错？\n a. Overload(int m)与Overload(double m)互为重载的构造方法。 b. int Overload(int m)与void Overload(double m)互为重载的非构造方法。 c. Overload类有 2 个构造方法，尝试调用默认构造方法Overload()会无法通过编译。 d. Overload类有 3 个构造方法。  Question3: 简答题 overload2 #  阅读下面这段代码：\npublic class Overload2 {  int a,b;  int c=-1;  public Overload2(){a=-2;}  public Overload2(int p1,int p2){a=p1; b=p2;}  public Overload2(int p1,int p2,int p3){  this(p1,p2);  c=p3;  }   @Override  public String toString(){  return String.format(\u0026#34;(a,b,c)=(%d,%d,%d)\u0026#34;,a,b,c);  }  public static void main(String args[]){  Overload2 s = new Overload2();  System.out.println(s);  System.out.println(new Overload2(5,6));  System.out.println((new Overload2(2,3,4)).toString());  }  } 运行java Overload2，程序的输出是什么？\n题外话：\n根据void java.io.PrintStream.print()系列函数的实现，当传入的 String 或 Object 是 null 时，最后都会导致输出字符串”null”，而不是什么都不输出。\n进行字符串连接时也一样：\u0026quot; \u0026quot; + null 的结果是 \u0026quot;null\u0026quot;。\n因此当涉及相关操作时需要稍微注意一下。\n具体原因参见java.io.PrintStream、java.lang.String的源代码。\nQuestion4: 简答题 finalize #  阅读下面这段代码：\npublic class User {  public static int userCount = 0;  public User() {  ++userCount;  }   @Override  protected void finalize() throws Throwable {  super.finalize();  System.out.println(\u0026#34;bye\u0026#34;);  --userCount;  }  public static void main(String[] args) {  System.out.println(User.userCount); // 1  User u = new User();  System.out.println(User.userCount); // 2  u = null;  System.out.println(User.userCount); // 3  System.gc();  System.out.println(User.userCount); // 4  } } 注意代码中用注释标出的四行System.out.println(User.userCount)，某些行的输出结果有多种可能。\n运行java User，程序的输出可能是什么？\n 你需要在 answer.md 中说明如下内容\n    注释标记行 可能的输出内容     1    2    3    4     有什么办法可以让finalize()在main()结束前一定被调用吗？\n题外话：\n和 C++不同，在 Java 中显式重写 finalize() 通常是不必要的。\njava.lang.System.gc()只会在需要的时候执行垃圾收集，你的调用只是一个“建议”。\nQuestion5: 编程题 #  写一个音乐类，并编写测试类显示音乐信息（音乐名称、音乐类型）。\n写一个手机类，并编写测试类显示手机信息（手机品牌、手机型号）\n你需要在 answer.md 中说明如下内容\n目录名为：Question5 文件名有：(如果你放了一个项目进来，则说明你的项目结构以及入口位置)   唠叨两句：\n手机类和音乐类都需要完成 “显示信息” 这样的功能，那我们能否将这一功能封装起来实现呢？\n比如我们可以让手机类和音乐类都实现一个 IMessage 接口， 他们就有了统一的测试方法：\nclass Test {  public static void main(String args[]) {  IMessage music = new Music();  IMessage mobile = new Mobile();  music.print()  mobile.print()  } } 当然，在这个题中，使用这样的实现方式未免有点 “过度封装”。\n如果之后完成个人 / 团队大作业时遇到了类似的场景，不妨在想一想能否应用上述的模式进行设计。\nQuestion6: 编程题 #  编写程序,在其中定义两个类：\n Person 类：  属性有 name、age 和 sex 提供你认为必要的构造方法 方法 setAge() 设置人的合法年龄 (0~130) 方法 getAge() 返回人的年龄 方法 work() 输出字符串“working” 方法 showAge() 输出 age 值   TestPerson 类：  创建 Person 类的对象，设置该对象的 name、age 和 sex 属性 调用 setAge() 和 getAge() 方法，体会 Java 的封装性。 创建第二个对象，执行上述操作，体会同一个类的不同对象之间的关系。    你需要在 answer.md 中说明如下内容\n目录名为：Question6 文件名有：(如果你放了一个项目进来，则说明你的项目结构以及入口位置)   Question7: 编程题 #  编写一个 Java 命令行程序，只从标准输入读取一行用户输入，判断这行输入是否是一个没有前导 0 的无符号整数；如果是，则还要判断该数字是否是一个回文数。输出你的判断和执行结果。\n对于“没有前导 0 的无符号整数”的定义：\n 是一个字符串 s s 的长度至少是 1，没有上限要求 s 的字符集 Σ={0, 1, 2, 3, 4, 5, 6, 7, 8, 9}，其他所有字符都不应该出现在 s 中 当 s 的长度大于 1 时，若从其首部开始有若干个连续字符 0，那么这些字符 0 都叫做 s 的“前导 0”  比如数字串 00010020，有三个前导 0 比如数字串 01，有 1 个前导 0 比如数字串 102030，没有前导 0 比如数字串 0，没有前导 0    本题对于回文数的定义：\n 是一个字符串 s s 的长度至少是 1，没有上限要求 s 的字符集 Σ={0, 1, 2, 3, 4, 5, 6, 7, 8, 9}，其他所有字符都不应该出现在 s 中 将 s 中的字符逆序排列并去除前导 0 得到的数字串 r，有 s 和 r 完全相同  s=123 时，r=321，不相同，s 和 r 都不是回文数 s=12321 时，r=12321，相同，s 是回文数 s=12100 时，r=121，不相同，s 不是回文数，但 r 是回文数 s=1 时，r=1，相同，s 是回文数 s=0 时，r=0，相同，s 是回文数    本题将输入的一行字符视为一个完整的字符串，如果输入的是诸如“121 121”这样包含空格的串，虽然 121 是回文数，但是整个串不应该被认为是回文数。如果将字符集扩充为包含空格的其他字符集，那么“121 121”就是一个该字符集下的回文串，不过本题的字符集限定为由 0~9 这十个数字组成的字符集。\n你需要在 answer.md 中说明如下内容\n目录名为：Question7 文件名有：(如果你放了一个项目进来，则说明你的项目结构以及入口位置)   "},{"id":4,"href":"/Java-HomeWork/docs/OOP-LAB/TEMPLATE/","title":"Template","section":"Oop Lab","content":"Lab XX Assignment #   班级：\n学号：\n姓名：\n 提交要求（以下内容在最终提交的作业中可以删除，仅作参考） #  目录格式\n-- 班级-学号-姓名-LabXX.zip  |-- answer.pdf  |-- solution  |-- Question1  |-- 题1的代码文件(如果需要)   |-- Question2  |-- 题2的代码文件(如果需要)  |-- ... "}]