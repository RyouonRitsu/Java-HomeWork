<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java 实验规划 on 面向对象的程序设计</title><link>https://ryouonritsu.github.io/Java-HomeWork/</link><description>Recent content in Java 实验规划 on 面向对象的程序设计</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://ryouonritsu.github.io/Java-HomeWork/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://ryouonritsu.github.io/Java-HomeWork/docs/OOP-LAB/LAB01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryouonritsu.github.io/Java-HomeWork/docs/OOP-LAB/LAB01/</guid><description>Lab01: 认识 Java # 1. 实验目的 # 掌握 Java 环境配置 使用 CMD 编译运行 Java 程序 使用 IDE 编译运行 Java 应用程序 理解 Java 语言中的关键字、标识符并能灵活使用 理解、掌握 Java 语言的简单数据类型并能灵活使用（重点强制类型转换） 理解引用数据类型，理解简单数据类型和引用数据类型的特点 理解、掌握 Java 语言中的运算符并能灵活使用 理解、掌握常量与变量的概念并能灵活使用 2. 编译与运行 # Question01 # 借助身边的工具，学习 java， javac 等命令的使用，并尝试通过命令行来编译并运行一个 Java 程序，输出 Hello, World!，提交你所使用的命令和运行结果截图。
Question02 # 相信这一定难不倒聪明的你，接下来我们略微增加一点点难度 ~ 你需要输出很多 Hello, World!
本题需要你实现一个 Test 类：
程序开始运行，进入main方法，并输出你的学号和姓名
当终端输入 QUIT 时，系统退出，并在终端打印一行字符：
----- Good Bye! ----- 对于其他的输入，在终端中输出一行 Hello, World!，等待下一行输入 你需要提交运行时的截图。
程序退出 # 和 C 语言的return 0类似，Java 程序也有其退出码，整个程序的正常的退出码应该为 0，而不应该为-1、1 等。</description></item><item><title/><link>https://ryouonritsu.github.io/Java-HomeWork/docs/OOP-LAB/LAB02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryouonritsu.github.io/Java-HomeWork/docs/OOP-LAB/LAB02/</guid><description>Lab02: Java 语法 &amp;amp; 面向对象初步 # 1. 实验目的 # 掌握 Java 环境配置 使⽤ CMD 编译运⾏ Java 程序 使⽤ IDE 编译运⾏ Java 应⽤程序 理解 Java 语⾔中的关键字、标识符并能灵活使⽤ 理解、掌握 Java 语⾔的简单数据类型并能灵活使⽤（重点强制类型转换） 理解引⽤数据类型，理解简单数据类型和引⽤数据类型的特点 理解、掌握 Java 语⾔中的运算符并能灵活使⽤ 理解、掌握常量与变量的概念并能灵活使⽤ 理解、掌握 Java 语⾔的流程控制（重点 switch case break 语句）并能灵活使⽤ 理解、掌握 Java 语⾔的数组的声明、赋值及使⽤ 理解掌握面向对象思维方式，确定问题域，使用面向对象思维解决实际问题 2. Class 初步 # Question01 # 阅读下列 Java 源文件，并回答问题。
public class Person { void sayHello() { System.out.print(&amp;#34;您好，很高兴认识您&amp;#34;); System.out.println(&amp;#34;nice to meet you!&amp;#34;); } } class PersonTest { public static void main(String[] args) { Person rover = new Person(); rover.</description></item><item><title/><link>https://ryouonritsu.github.io/Java-HomeWork/docs/OOP-LAB/Lab03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryouonritsu.github.io/Java-HomeWork/docs/OOP-LAB/Lab03/</guid><description>Java 程序设计 Lab03 # 实验目的 # 理解并掌握类的概念 理解并掌握对象的概念 理解类与对象的关系 理解面向对象中抽象过程 理解面向对象中的消息 理解 Java 程序的基本结构并能灵活使用 理解并掌握 Java 类的定义（成员变量、成员方法和方法重载） 理解并掌握 Java 类的构造函数（默认构造函数、带参数构造函数），理解重 载的构造函数并灵活使用 理解 Java 垃圾内存自动回收机制 理解并掌握 Java 类变量和类方法 实验题目 # Question1: 简答题 # 编译下面这个类：
public class Sample { int x; // 1 long y = x; // 2 public void f(int n) { int m; // 3 int t = n + m; // 4 } public static void main(String[] args) { Sample t=new Sample(); t.</description></item><item><title/><link>https://ryouonritsu.github.io/Java-HomeWork/docs/OOP-LAB/TEMPLATE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryouonritsu.github.io/Java-HomeWork/docs/OOP-LAB/TEMPLATE/</guid><description> Lab XX Assignment # 班级：
学号：
姓名：
提交要求（以下内容在最终提交的作业中可以删除，仅作参考） # 目录格式
-- 班级-学号-姓名-LabXX.zip |-- answer.pdf |-- solution |-- Question1 |-- 题1的代码文件(如果需要) |-- Question2 |-- 题2的代码文件(如果需要) |-- ...</description></item><item><title/><link>https://ryouonritsu.github.io/Java-HomeWork/docs/MySCS/MySCS-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryouonritsu.github.io/Java-HomeWork/docs/MySCS/MySCS-1/</guid><description>MySCS -1 # 同学们，从这周开始，我们会迭代完成一个MySCS，即从零开发的软件学院云平台（青春版）。
我们每两周会增加一次新的需求，如，MySCS-1需要大家完成账号注册和登录系统，MySCS-2需要大家在1的基础上添加课程系统或其它系统等。
编写好的代码需要大家用patpat评测，所有测试点都通过以后即可上传到云平台完成本次实验。希望大家认真完成哦！请勿抄袭，抄袭会被查到的（盯
题目背景 # 软件学院云平台（青春版），即MySCS，是一款更加轻量化的命令行操作的云平台，屏幕前的你拥有完全自主知识产权，有极大的使用价值和收藏价值。
MySCS分为教师端和学生端，可以实现传统scs的大部分功能，如教师端对课程的增删改查，对课程所属的实验的增删改查，教师还可以为课程添加学生和助教，学生可以查看参与的课程并提交实验作业，助教可以协同老师管理课程等。
命令概览 # 命令行 功能 输出 QUIT 系统关机 &amp;mdash;&amp;ndash; Good Bye! &amp;mdash;&amp;ndash; register 学工号 名 姓 邮箱 密码 确认密码 注册 register success
already logged in
user id illegal
user id duplication
user name illegal
email address illegal
password illegal
passwords inconsistent login 学工号 密码 登录 Hello 名~
Hello Professor 姓~
already logged in
user id illegal
user id not exist</description></item><item><title/><link>https://ryouonritsu.github.io/Java-HomeWork/docs/Q-A/%E7%AC%AC%E4%B8%80%E6%9C%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryouonritsu.github.io/Java-HomeWork/docs/Q-A/%E7%AC%AC%E4%B8%80%E6%9C%9F/</guid><description>OOP实验猪脚说——第一期 # [toc]
前言 # 因为同学们的共性问题非常多，所以各位助教（猪脚）总结并写了下来方便各位查阅，不定期更新，希望能帮到大家。
迭代实验 # 前置步骤 # Windows用户 # 下载群内提供的patpat示例教程.zip并解压，使用方式在其中的README.md中有详细说明。为了防止大家懒得看，也可以看接下来的步骤；
patpat-windows-amd64.exe需要重新命名为patpat.exe；
在patpat示例教程下打开终端（命令行）运行如下命令：
./patpat reg -sid your_sid -pwd your_password # 如./patpat reg -sid 18373722 -pwd buaa-se-oop 账号创建后，密码不支持修改。如需修改，请联系助教。
macOS或Linux用户 # 下载群内提供的patpat示例教程.zip并解压，使用方式在其中的README.md中有详细说明。为了防止大家懒得看，也可以看接下来的步骤；
下载群内提供的patpat各版本.zip并解压，选择正确的版本移入patpat示例教程文件夹中，替换并删除掉原有的patpat-windows-amd64.exe；
替换后的文件需要重新命名为patpat；
在patpat示例教程下打开终端（命令行）运行chmod +x patpat，使评测机程序具有可执行权限；
在patpat示例教程下打开终端（命令行）运行如下命令：
./patpat reg -sid your_sid -pwd your_password # 如./patpat reg -sid 18373722 -pwd buaa-se-oop 账号创建后，密码不支持修改。如需修改，请联系助教。
实验具体流程 # 编写完迭代作业的代码；
建立一个n-学号-姓名的文件夹在patpat示例教程下，其内建立out文件夹（out是n-学号-姓名文件夹的子孙）；
把你idea中的src文件夹直接复制粘入n-学号-姓名中 （src是out的兄弟）；
终端（命令行）中运行
./patpat ta -judge 1-学号-姓名 -pwd your_pwd -tag 随意打一些文字，可以用来标注第几次尝试 # 线上测试命令 命令（不是stu命令不是stu命令不是stu命令，自己编写测试文件和stu自测基本上用不到，只是提供了这么个功能，完全没必要用，我上次就没用过）；</description></item><item><title/><link>https://ryouonritsu.github.io/Java-HomeWork/docs/Resource/Java8-17%E8%AF%AD%E6%B3%95%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ryouonritsu.github.io/Java-HomeWork/docs/Resource/Java8-17%E8%AF%AD%E6%B3%95%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</guid><description>Java8-17语法新特性总结 # 班级：202115
学号：19377054
姓名：周洪熙
Java 8 # Interface # interface 的设计初衷是面向抽象，提高扩展性。这也留有一点遗憾，interface 修改的时候，实现它的类也必须跟着改。
为了解决接口的修改与现有的实现不兼容的问题。新 interface 的方法可以用 default 或 static 修饰，这样就可以有方法体，实现类也不必重写此方法。
一个 interface 中可以有多个方法被它们修饰，这 2 个修饰符的区别主要也是普通方法和静态方法的区别。
default 修饰的方法，是普通实例方法，可以用this调用，可以被子类继承、重写。
static 修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用Interface调用。 我们来看一个实际的例子。
public interface InterfaceNew { static void sm() { System.out.println(&amp;#34;interface提供的方式实现&amp;#34;); } static void sm2() { System.out.println(&amp;#34;interface提供的方式实现&amp;#34;); } default void def() { System.out.println(&amp;#34;interface default方法&amp;#34;); } default void def2() { System.out.println(&amp;#34;interface default2方法&amp;#34;); } //须要实现类重写 void f(); } public interface InterfaceNew1 { default void def() { System.</description></item></channel></rss>