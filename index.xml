<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java 实验规划 on 面向对象的程序设计</title><link>https://Super-BUAA-2021.github.io/Java-HomeWork/</link><description>Recent content in Java 实验规划 on 面向对象的程序设计</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://Super-BUAA-2021.github.io/Java-HomeWork/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB00/</guid><description>Lab00: 认识 Java # 1. 实验⽬的 # 掌握 Java 环境配置 使用 CMD 编译运行 Java 程序 使用 IDE 编译运行 Java 应用程序 理解 Java 语言中的关键字、标识符并能灵活使用 理解、掌握 Java 语言的简单数据类型并能灵活使用（重点强制类型转换） 理解引用数据类型，理解简单数据类型和引用数据类型的特点 理解、掌握 Java 语言中的运算符并能灵活使用 理解、掌握常量与变量的概念并能灵活使用 2. 编译与运行 # Question01:
借助身边的工具，学习 java， javac 等命令的使用，并尝试编译运行一个 Java 程序。
2. Hello, World! # Question02:
学习一个新语言的第一步，自然是输出 Hello, World!。
但是作为大二的学生，我们略微增加一点点难度 ~ 你需要输出很多 Hello, World!
本题需要你实现一个 Test 类：
程序开始运行，进入main方法，并输出你的学号和姓名
当终端输入 QUIT 时，系统退出，并在终端打印一行字符：</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB01/</guid><description>Lab01: Java 语法 &amp;amp; 面向对象初步 # 1. 实验⽬的 # 掌握 Java 环境配置 使⽤ CMD 编译运⾏ Java 程序 使⽤ IDE 编译运⾏ Java 应⽤程序 理解 Java 语⾔中的关键字、标识符并能灵活使⽤ 理解、掌握 Java 语⾔的简单数据类型并能灵活使⽤（重点强制类型转换） 理解引⽤数据类型，理解简单数据类型和引⽤数据类型的特点 理解、掌握 Java 语⾔中的运算符并能灵活使⽤ 理解、掌握常量与变量的概念并能灵活使⽤ 理解、掌握 Java 语⾔的流程控制（重点 switch case break 语句）并能灵活使⽤ 理解、掌握 Java 语⾔的数组的声明、赋值及使⽤ 理解掌握面向对象思维方式，确定问题域，使用面向对象思维解决实际问题 2. Class 初步 # Question01: 阅读下列 Java 源文件，并回答问题。
public class Person { void speakHello() { System.out.print(&amp;#34;您好，很高兴认识您&amp;#34;); System.out.println(&amp;#34; nice to meet you&amp;#34;); } } class Xiti { public static void main(String args[]) { Person zhang = new Person(); zhang.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB02/</guid><description>Java 程序设计 Lab02 # 实验目的 # 理解并掌握类的概念 理解并掌握对象的概念 理解类与对象的关系 理解面向对象中抽象过程 理解面向对象中的消息 理解 Java 程序的基本结构并能灵活使用 理解并掌握 Java 类的定义（成员变量、成员方法和方法重载） 理解并掌握 Java 类的构造函数（默认构造函数、带参数构造函数），理解重 载的构造函数并灵活使用 理解 Java 垃圾内存自动回收机制 理解并掌握 Java 类变量和类方法 实验题目 # Question1: 简答题 # 编译下面这个类：
public class Sample { int x; // 1 long y = x; // 2 public void f(int n) { int m; // 3 int t = n + m; // 4 } public static void main(String[] args) { Sample t=new Sample(); t.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB03/</guid><description>Java 程序设计 LAB03 # 实验目的 # 理解封装含义 理解信息隐藏的必要性 掌握访问控制修饰符的使用 私有成员（变量和方法）的理解和使用 共有成员的理解和使用 保护成员的理解和使用 使用不加任何权限修饰符的成员 加深对“类和对象”的理解 注意事项 # 建议建立一个自己的统一且良好的代码风格，比如命名风格（camelCase、snake_case 等）、缩进方式（空格数量、switch-case 缩不缩进等）、开闭大括号换不换行等容易引发战 争（迫真）的东西，以养成良好的编程习惯。
编程题最好为每一个类编写一个完备的测试类，覆盖尽可能多的输入、函数调用、输出，以证明代码正确实现了功能。
如果编程题使用了 package 语句，应当确保提交时目录结构和 package 语句表达的包结构相同。（IDE 很多时候会帮你做）
编程题在给出了具体需求的情况下，可以根据自己的需要添加额外的方法。
实验题目 # 初始化 I # 阅读下面这段代码，尝试理解 Java 中初始化的顺序：
class A { int value; static A a1 = new A(1); public A(int i) { System.out.println(&amp;#34;initialize A&amp;#34;+i); value = i; } public A(A a) { System.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB04/</guid><description>Java 程序设计 LAB04 # 实验目的 # 理解继承的必要性 理解继承的基本概念：单继承，多继承 掌握继承的使用 子类属性、构造方法和一般成员方法的书写的编写 变量隐藏 this 和 super 的使用 向上映射 在继承的基础上加深理解权限控制符的使用 保护成员的使用 方法覆盖（初步，重点放在多态一章） 复合与继承的区别及使用 注意事项 # 建议建立一个自己的统一且良好的代码风格，比如命名风格（camelCase、snake_case等）、缩进方式（空格数量、switch-case 缩不缩进等）、开闭大括号换不换行等容易引发战争（迫真）的东西，以养成良好的编程习惯。编程题最好为每一个类编写一个完备的测试类，覆盖尽可能多的输入、函数调用、输出，以证明代码正确实现了功能。如果编程题使用了 package 语句，应当确保提交时目录结构和 package 语句表达的包结构相同。（IDE 很多时候会帮你做）编程题在给出了具体需求的情况下，可以根据自己的需要添加额外的方法。
大家可以在 vscode、IDEA 等 ide 上找到对应的代码风格检查工具，也可以自己设置自己的代码风格文件，可自行搜索了解 例如： vscode 插件 checkstyle
实验题目 # Question1. Package # 浏览 Code 文件夹中的 Question01 目录，不允许变更目录结构和文件位置，只允许在文件中添加 package 和 import 语句，使根目录下 build 和 test 文件中的指令可以无报错顺利执行。
Question2. 权限 # 阅读 Code 文件夹中的 Question02 目录，根据你对访问权限的理解。将文件中所有无法通过编译的语句注释掉。</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB05/</guid><description>Java 程序设计 LAB05 # 实验目的： # 理解静多态和动多态的概念 理解多态的必要性和实现机制 理解并灵活使用方法重载和方法覆盖 理解并灵活使用抽象类和抽象方法 理解接口的必要性（将接口用作 API） 掌握如何定义接口、实现接口 将接口用作类型、使用接口回调 理解并掌握接口的继承 面向接口的编程 简单了解 Object 类 掌握良好重写 Object 类中方法的能力 实验题目 # Question01 多态 1 输出/简答题 # 阅读下面这段代码：
// Test.java class PrivateOverride { private void f() { System.out.println(&amp;#34;private f()&amp;#34;); } public static void main(String[] args) { PrivateOverride po = new Derived(); po.f(); } } class Derived extends PrivateOverride { public void f() { System.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB06/</guid><description>Java 程序设计 LAB06 # 实验目的 # 简单了解 Object 类 掌握良好重写 Object 类中方法的能力 简单了解内部类、匿名类 实验题目 # 本实验假设你明白：
涉及内部类时的初始化过程 内部类能够访问其外部类的所有属性和方法 构造内部类必须先构造外部类对象 嵌套类（静态内部类）只能够访问外部类的静态属性和方法 嵌套类可以直接通过类名构造 匿名内部类和局部内部类中直接使用的外部数据必须是 final 的（除非是匿名类的方法 的参数） 上述这些语法层面的东西，可以尝试自行证明。 本次实验不会涉及以下内部类的常用技巧：
回调与闭包 事件与控制框架 也不会涉及以下内部类的边角情况：
内部类的继承与覆盖 多重嵌套的内部类 Question01 InnerClass1 代码填空 # 阅读下面这段代码：
class Outer { public int num = 10; class Inner { public int num = 20; public void show() { int num = 30; System.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/TEMPLATE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/TEMPLATE/</guid><description>Lab XX Assignment # 班级：
学号：
姓名：
提交要求（以下内容在最终提交的作业中可以删除，仅作参考） # 目录格式
-- 班级-学号-姓名-LabXX.zip |-- answer.pdf |-- solution |-- Question1 |-- 题1的代码文件(如果需要) |-- Question2 |-- 题2的代码文件(如果需要) |-- ...</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/CTS/CTS-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/CTS/CTS-1/</guid><description>CTS-1 # 咖喱铁路售票系统curry ticketing system -1
题目背景 # ​ 在世界上某个能歌善舞的国家，铁路系统实行配额制，即为弱势群体提供不同的票价优惠，人们通过实名制进行铁路火车票预订，可以查询线路图和购票情况。铁路管理员则负责管理铁路线路，火车营运。同时，还存在团购性质的代理人，能够一次性购买更多的车票。为了让大家能够有序购票乘车，现开发一款铁路售票管理系统，实现上述场景功能。
功能描述 # ① 开关机 # 实现最基本的命令读入和退出功能
首先，你的任务是编写一个Test类：
当程序启动，进入main方法，并连续读入输入的命令，命令的基本格式为：
选项 [参数1] [参数2] [参数3] 其中参数数目为不定项
当终端输入 QUIT 时，系统退出（程序退出状态为0），并在终端打印一行字符：
----- Good Bye! ----- 对于其他的输入，不做任何处理，等待下一行输入 下方是按行读取的一种参考实现 Scanner in = new Scanner(System.in); String argStr; while (true) { argStr = in.nextLine(); } ②用户注册 # 黄金右手国的居民们使用的身份证称为“Aadhaar卡&amp;quot;，铁路系统内的用户注册需要填写姓名、性别、Aadhaar卡号。其中Aadhaar号需要满足以下格式：
Aadhaar卡号一共12位，全国唯一 前4位为区域代码，范围是[0001,1237] 中间4位为种姓代码，范围为[0020,0460] 最后四位为生物识别库提供的生物识别码，前三位的范围为[000,100]，最后一位表示持有人的性别，0代表女性，1代表男性，2代表其他。 合法的Aadhaar卡号示例：</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/CTS/CTS-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/CTS/CTS-2/</guid><description>CTS-2
咖喱铁路售票系统curry ticketing system -2
题目背景 # 售票系统最核心的功能是什么？当然是售票啦！现在请你在CTS-1的基础上实现以下功能：
超级管理员 # 本着“以抢钱为宗旨，待旅客如孙子”的宗旨，咖喱铁路票价的定价权必须掌握在高层的手中。高层管理人员拥有一句神奇的咒语，向系统中输入这句咒语即可进入管理员模式，进行关键数据的修改。
那么这句咒语就是——TunakTunakTun（译：我在东北玩泥巴）
实现以下功能：
命令 功能描述 TunakTunakTun 从标准模式进入超级管理员模式，并输出DuluDulu NutKanutKanut 退出超级管理员模式，并输出DaDaDa 异常处理 若已经在管理员模式下执行TunakTunakTun或在普通模式下执行NutKanutKanut，输出WanNiBa 注：以下功能前备注（超级管理员模式）为仅可以在超级管理员模式下执行的命令，（标准模式）为仅可以在标准模式下执行的命令，未标注的命令在两种模式下均可执行。
线路和列车管理 # 为方便起见，我们假定在黄金右手国，所有的铁路线路都是从首都第三新德里市（Delhi-3）出发，沿自己的线路折返运行，跨线换乘需要在第三新德里市下车并重新购买车票，并且乘客中途到站下车不释放席位。
在超级管理员模式下可以向系统中添加新建成的线路列车、指定票价、席位数量信息等操作。
线路管理 # （超级管理员模式）添加和删除线路
命令 参数1 参数2 参数2k+1(k&amp;gt;=1整数) 参数2*(k+1) 功能描述 addLine 线路编号 负载能力 站点名2k+1 里程数2k+1 添加一条新的线路，并添加初始站点，若成功则输出Add Line success 里程数计算方式：起点第三新德里市（站点0）的里程数为0，每个站点的里程数为该站距第三新德里市的里程（里程数可以相同）。线路编号为字符串类型，负载能力表示该线路上能开行的最大列车数量。 delLine 线路编号 删除线路，并删除在该线路上运行的全部列车。若成功输出Del Line success 异常处理</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/CTS/CTS-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/CTS/CTS-3/</guid><description>CTS-3 # 咖喱铁路售票系统curry ticketing system -1
约定 # 这次真的超级简单der
CTS-3会测试前面已实现的功能，但不会加强，所以只要CTS-2能过就不会出现旧功能的问题
对于一行命令输入，只报优先级最高的一个错误，报错优先级为：
命令名称 &amp;gt; 参数数量 &amp;gt; 参数合法性（从左至右） 其它情况请以功能描述要求的报错顺序为准
概览 # ​ 本次CTS-3你需要实现的全部新功能（命令）如下表所示，详细要求请见下文。
命令 参数1 参数2 参数3 参数4 参数5 功能描述 login Aadhaar卡号 姓名 用户登录，是购票的前序操作 logout 退出当前登录的用户账户 buyTicket 列车车次 出发站 目的站 席位代号 张数 用户购买车票 listOrder 查询已购买的车票 login # ​</description></item></channel></rss>