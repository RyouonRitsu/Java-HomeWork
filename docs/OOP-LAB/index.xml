<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>面向对象的程序设计</title><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/</link><description>Recent content on 面向对象的程序设计</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB00/</guid><description>Lab00: 认识 Java # 1. 实验⽬的 # 掌握 Java 环境配置 使用 CMD 编译运行 Java 程序 使用 IDE 编译运行 Java 应用程序 理解 Java 语言中的关键字、标识符并能灵活使用 理解、掌握 Java 语言的简单数据类型并能灵活使用（重点强制类型转换） 理解引用数据类型，理解简单数据类型和引用数据类型的特点 理解、掌握 Java 语言中的运算符并能灵活使用 理解、掌握常量与变量的概念并能灵活使用 2. 编译与运行 # Question01:
借助身边的工具，学习 java， javac 等命令的使用，并尝试编译运行一个 Java 程序。
2. Hello, World! # Question02:
学习一个新语言的第一步，自然是输出 Hello, World!。
但是作为大二的学生，我们略微增加一点点难度 ~ 你需要输出很多 Hello, World!
本题需要你实现一个 Test 类：
程序开始运行，进入main方法，并输出你的学号和姓名
当终端输入 QUIT 时，系统退出，并在终端打印一行字符：</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB01/</guid><description>Lab01: Java 语法 &amp;amp; 面向对象初步 # 1. 实验⽬的 # 掌握 Java 环境配置 使⽤ CMD 编译运⾏ Java 程序 使⽤ IDE 编译运⾏ Java 应⽤程序 理解 Java 语⾔中的关键字、标识符并能灵活使⽤ 理解、掌握 Java 语⾔的简单数据类型并能灵活使⽤（重点强制类型转换） 理解引⽤数据类型，理解简单数据类型和引⽤数据类型的特点 理解、掌握 Java 语⾔中的运算符并能灵活使⽤ 理解、掌握常量与变量的概念并能灵活使⽤ 理解、掌握 Java 语⾔的流程控制（重点 switch case break 语句）并能灵活使⽤ 理解、掌握 Java 语⾔的数组的声明、赋值及使⽤ 理解掌握面向对象思维方式，确定问题域，使用面向对象思维解决实际问题 2. Class 初步 # Question01: 阅读下列 Java 源文件，并回答问题。
public class Person { void speakHello() { System.out.print(&amp;#34;您好，很高兴认识您&amp;#34;); System.out.println(&amp;#34; nice to meet you&amp;#34;); } } class Xiti { public static void main(String args[]) { Person zhang = new Person(); zhang.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB02/</guid><description>Java 程序设计 Lab02 # 实验目的 # 理解并掌握类的概念 理解并掌握对象的概念 理解类与对象的关系 理解面向对象中抽象过程 理解面向对象中的消息 理解 Java 程序的基本结构并能灵活使用 理解并掌握 Java 类的定义（成员变量、成员方法和方法重载） 理解并掌握 Java 类的构造函数（默认构造函数、带参数构造函数），理解重 载的构造函数并灵活使用 理解 Java 垃圾内存自动回收机制 理解并掌握 Java 类变量和类方法 实验题目 # Question1: 简答题 # 编译下面这个类：
public class Sample { int x; // 1 long y = x; // 2 public void f(int n) { int m; // 3 int t = n + m; // 4 } public static void main(String[] args) { Sample t=new Sample(); t.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB03/</guid><description>Java 程序设计 LAB03 # 实验目的 # 理解封装含义 理解信息隐藏的必要性 掌握访问控制修饰符的使用 私有成员（变量和方法）的理解和使用 共有成员的理解和使用 保护成员的理解和使用 使用不加任何权限修饰符的成员 加深对“类和对象”的理解 注意事项 # 建议建立一个自己的统一且良好的代码风格，比如命名风格（camelCase、snake_case 等）、缩进方式（空格数量、switch-case 缩不缩进等）、开闭大括号换不换行等容易引发战 争（迫真）的东西，以养成良好的编程习惯。
编程题最好为每一个类编写一个完备的测试类，覆盖尽可能多的输入、函数调用、输出，以证明代码正确实现了功能。
如果编程题使用了 package 语句，应当确保提交时目录结构和 package 语句表达的包结构相同。（IDE 很多时候会帮你做）
编程题在给出了具体需求的情况下，可以根据自己的需要添加额外的方法。
实验题目 # 初始化 I # 阅读下面这段代码，尝试理解 Java 中初始化的顺序：
class A { int value; static A a1 = new A(1); public A(int i) { System.out.println(&amp;#34;initialize A&amp;#34;+i); value = i; } public A(A a) { System.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB04/</guid><description>Java 程序设计 LAB04 # 实验目的 # 理解继承的必要性 理解继承的基本概念：单继承，多继承 掌握继承的使用 子类属性、构造方法和一般成员方法的书写的编写 变量隐藏 this 和 super 的使用 向上映射 在继承的基础上加深理解权限控制符的使用 保护成员的使用 方法覆盖（初步，重点放在多态一章） 复合与继承的区别及使用 注意事项 # 建议建立一个自己的统一且良好的代码风格，比如命名风格（camelCase、snake_case等）、缩进方式（空格数量、switch-case 缩不缩进等）、开闭大括号换不换行等容易引发战争（迫真）的东西，以养成良好的编程习惯。编程题最好为每一个类编写一个完备的测试类，覆盖尽可能多的输入、函数调用、输出，以证明代码正确实现了功能。如果编程题使用了 package 语句，应当确保提交时目录结构和 package 语句表达的包结构相同。（IDE 很多时候会帮你做）编程题在给出了具体需求的情况下，可以根据自己的需要添加额外的方法。
大家可以在 vscode、IDEA 等 ide 上找到对应的代码风格检查工具，也可以自己设置自己的代码风格文件，可自行搜索了解 例如： vscode 插件 checkstyle
实验题目 # Question1. Package # 浏览 Code 文件夹中的 Question01 目录，不允许变更目录结构和文件位置，只允许在文件中添加 package 和 import 语句，使根目录下 build 和 test 文件中的指令可以无报错顺利执行。
Question2. 权限 # 阅读 Code 文件夹中的 Question02 目录，根据你对访问权限的理解。将文件中所有无法通过编译的语句注释掉。</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB05/</guid><description>Java 程序设计 LAB05 # 实验目的： # 理解静多态和动多态的概念 理解多态的必要性和实现机制 理解并灵活使用方法重载和方法覆盖 理解并灵活使用抽象类和抽象方法 理解接口的必要性（将接口用作 API） 掌握如何定义接口、实现接口 将接口用作类型、使用接口回调 理解并掌握接口的继承 面向接口的编程 简单了解 Object 类 掌握良好重写 Object 类中方法的能力 实验题目 # Question01 多态 1 输出/简答题 # 阅读下面这段代码：
// Test.java class PrivateOverride { private void f() { System.out.println(&amp;#34;private f()&amp;#34;); } public static void main(String[] args) { PrivateOverride po = new Derived(); po.f(); } } class Derived extends PrivateOverride { public void f() { System.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB06/</guid><description>Java 程序设计 LAB06 # 实验目的 # 简单了解 Object 类 掌握良好重写 Object 类中方法的能力 简单了解内部类、匿名类 实验题目 # 本实验假设你明白：
涉及内部类时的初始化过程 内部类能够访问其外部类的所有属性和方法 构造内部类必须先构造外部类对象 嵌套类（静态内部类）只能够访问外部类的静态属性和方法 嵌套类可以直接通过类名构造 匿名内部类和局部内部类中直接使用的外部数据必须是 final 的（除非是匿名类的方法 的参数） 上述这些语法层面的东西，可以尝试自行证明。 本次实验不会涉及以下内部类的常用技巧：
回调与闭包 事件与控制框架 也不会涉及以下内部类的边角情况：
内部类的继承与覆盖 多重嵌套的内部类 Question01 InnerClass1 代码填空 # 阅读下面这段代码：
class Outer { public int num = 10; class Inner { public int num = 20; public void show() { int num = 30; System.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB07/</guid><description>Java 程序设计 LAB07 # 实验目的 # 理解集合框架的设计思路
了解 Java 常用的数据结构类及其使用，重点迭代器(Iterator) 、线性表（List、ArrayList、LinkedList）、HashMap 类、HashSet 类及枚举类在企业级软件编写中经常用到，要求在理解的基础上，熟练掌握
理解泛型的概念、必要性并能够灵活使用
实验题目 # Question1 简述ArrayList和LinkedList的区别 简答 # Question2 写出以下程序的输出 简答 # //Animal.java public class Animal { public Animal(){ System.out.println(&amp;#34;I am an animal&amp;#34;); } } //Dog.java public class Dog extends Animal{ public Dog(){ System.out.println(&amp;#34;I am a dog&amp;#34;); } } //AnimalTest.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB08/</guid><description>Java 程序设计 LAB08 # 实验目的 # 掌握异常处理机制 掌握使用 try…catch…finally 处理异常 掌握使用 throws 关键字 掌握使用 throw 关键字 创建用户自定义异常，并处理这种异常 实验题目 # Question1 Java中的检查型异常 (checked exception) 和非检查型异常 (unchecked exception) 有什么区别？ 简答 # Question2 简述Java异常处理中 throws 和 throw 关键字的作用。 简答 # Question3 请列出2个常见的运行时异常和2个非运行时异常。 简答 # Question4 指出下列程序的错误并改正。 改错 # import java.io.IOException; public class p04 { public static void start() throws IOException,RuntimeException{ throw new RuntimeException(&amp;#34;Unable to Start&amp;#34;); } public static void main(String[] args){ try{ start(); }catch (Exception ex){ ex.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/LAB09/</guid><description>Java 程序设计 LAB09 # 实验目的 # 理解并掌握控制台读入数据、标准输入输出、Scanner类（基础的输入输出）
理解并掌握Java文件管理（File类）、输入/输出流类及其派生类的使用（字节流的顺序读写）
理解并掌握读写器及其派生类的使用（字符流的顺序读写）
理解并掌握对象序列化（对象流的读写）
实验题目 # Question1 如果准备按字节读取一个文件的内容，应当使用 FileInputStream 流还是 FileReader 流，为什么？ 简答 # Question2 简答 # import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class FileInputStreamTest { public static void main(String[] args) { File f =new File(&amp;#34;hello.txt&amp;#34;); byte [] a=&amp;#34;abcd&amp;#34;.getBytes(); try{ FileOutputStream out=new FileOutputStream(f); out.</description></item><item><title/><link>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/TEMPLATE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Super-BUAA-2021.github.io/Java-HomeWork/docs/OOP-LAB/TEMPLATE/</guid><description>Lab XX Assignment # 班级：
学号：
姓名：
提交要求（以下内容在最终提交的作业中可以删除，仅作参考） # 目录格式
-- 班级-学号-姓名-LabXX.zip |-- answer.pdf |-- solution |-- Question1 |-- 题1的代码文件(如果需要) |-- Question2 |-- 题2的代码文件(如果需要) |-- ...</description></item></channel></rss>